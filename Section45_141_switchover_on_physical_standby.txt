
--on standby
SQL> ALTER DATABASE RECOVER MANAGED STANDBY DATABASE CANCEL;

SQL> SELECT PROCESS, STATUS, THREAD#, SEQUENCE#, BLOCK#, BLOCKS FROM V$MANAGED_STANDBY;

--on primary
SQL> sqlplus mytest/mytest@pdb1

SQL> insert into test_tab values(5);
SQL> commit;

SQL> shutdown immediate;


--flush any unsent archived and current redo (If the primary database can be mounted)
SQL> ALTER SYSTEM FLUSH REDO TO orclstb;

--determine if there are any redo gaps on the target standby database.
SQL> SELECT THREAD#, LOW_SEQUENCE#, HIGH_SEQUENCE# FROM V$ARCHIVE_GAP;


--on standby database, if there is gap, obtain the highest log sequence number for each redo thread
SQL> SELECT UNIQUE THREAD# AS THREAD, MAX(SEQUENCE#) OVER (PARTITION BY thread#) AS LAST from V$ARCHIVED_LOG;

--copy the most recently archived redo log file for each primary database redo thread (If possible)
--to the standby database if it does not exist there, then register it
SQL> ALTER DATABASE REGISTER PHYSICAL LOGFILE 'filespec1';


--on standby database
SQL> ALTER DATABASE RECOVER MANAGED STANDBY DATABASE CANCEL;

--perform failover
SQL> ALTER DATABASE FAILOVER TO orclstb;

--If an error occurs, perform a data loss failover
SQL> ALTER DATABASE ACTIVATE PHYSICAL STANDBY DATABASE;

--Open the new primary database
SQL> ALTER DATABASE OPEN;


--control the last row on test table
$ sqlplus mytest/mytest@pdb1

SQL> select * from test_tab;


--Flashing Back a Failed Primary Database into a Physical Standby Database

--On new primary database, determine the SCN at which the old standby database became the new primary database
SQL> SELECT TO_CHAR(STANDBY_BECAME_PRIMARY_SCN) FROM V$DATABASE;

standby_became_primary_scn: 1994334

--shut down the old primary database (if necessary), mount it, and flash it back to the value for STANDBY_BECAME_PRIMARY_SCN 
SQL> SHUTDOWN IMMEDIATE;
SQL> STARTUP MOUNT;
SQL> FLASHBACK DATABASE TO SCN 1994334;

--on the old primary database convert the database to a physical standby database 
SQL> ALTER DATABASE CONVERT TO PHYSICAL STANDBY;

--start redo apply
SQL> ALTER DATABASE RECOVER MANAGED STANDBY DATABASE DISCONNECT FROM SESSION;

SQL> SELECT PROCESS, STATUS, THREAD#, SEQUENCE#, BLOCK#, BLOCKS FROM V$MANAGED_STANDBY;

-------------------------------------
SQL> alter system set log_archive_dest_2='service="primary", db_unique_name="orclprm", valid_for=(online_logfile,all_roles)' scope=both;

SQL> alter system set log_archive_dest_state_2=enable;
-------------------------------------

--Switch back to original roles

--Verify that there are no redo transport errors or redo gaps at the new primary database
SQL> SELECT STATUS, GAP_STATUS FROM V$ARCHIVE_DEST_STATUS WHERE DEST_ID = 2;


--Verify that the target standby database is ready for switchover
SQL> ALTER DATABASE SWITCHOVER TO orclprm VERIFY;

--Initiate the switchover on the new primary database
SQL> ALTER DATABASE SWITCHOVER TO orclprm;

-- on primary database
SQL> ALTER DATABASE OPEN;

-- mount physical standby database
SQL> STARTUP MOUNT;

--open standby database read only
SQL> alter database open;

--Start Redo Apply on physical standby database
SQL> ALTER DATABASE RECOVER MANAGED STANDBY DATABASE DISCONNECT FROM SESSION;


--Failover operation via data guard broker
--on primary
SQL> shutdown abort

--on new primary
$ dgmgrl

DGMGRL> FAILOVER TO orclstb;

DGMGRL> SHOW CONFIGURATION

--on new standby
SQL> startup mount;

--on new primary
DGMGRL> REINSTATE DATABASE orclprm;

DGMGRL> SHOW CONFIGURATION

DGMGRL> SWITCHOVER TO orclprm

DGMGRL> SHOW CONFIGURATION


--Automatic failover
DGMGRL> connect sys/oracle@standby

DGMGRL> EDIT CONFIGURATION SET PROPERTY FastStartFailoverLagLimit=45;

DGMGRL> ENABLE FAST_START FAILOVER;

DGMGRL> START OBSERVER

DGMGRL> SHOW CONFIGURATION

--on primary
SQL> shutdown abort

--on new primary
DGMGRL> connect sys/oracle@standby

--on new standby
SQL> startup mount;

--on new primary
DGMGRL> REINSTATE DATABASE orclprm;




